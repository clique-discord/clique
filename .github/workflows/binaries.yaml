name: Build and Publish Binaries

on: push

jobs:
  draft-release:
    name: Create draft release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
    - name: Generate tag name
      run: echo "tag=$(date +nightly%Y-%m-%dT%H-%M-%S)" >> $GITHUB_OUTPUT
      id: tag

    - name: Create release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release create --draft "${{ steps.tag.output.tag }}" --title "Build at $(date)"

  build:
    name: Build for ${{ matrix.os }}
    needs: draft-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [linux, windows, macos]

        include:
        - name: linux
          os: ubuntu-latest
          collector-artifact: target/release/clique-collector
          collector-name: clique-collector-linux
          api-artifact: target/release/clique-api
          api-name: clique-api-linux
        - name: windows
          os: windows-latest
          collector-artifact: target/release/clique-collector.exe
          collector-name: clique-collector.exe
          api-artifact: target/release/clique-api.exe
          api-name: clique-api.exe
        - name: macos
          os: macos-latest
          collector-artifact: target/release/clique-collector
          collector-name: clique-collector-macos
          api-artifact: target/release/clique-api
          api-name: clique-api-macos

    steps:
    - name: Checkout project
      uses: actions/checkout@v3

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.2
      with:
        version: "v0.4.0-pre.9"

    - name: Build
      run: cargo build --release --locked
      env:
        SCCACHE_GHA_ENABLED: "true"
        RUSTC_WRAPPER: "sccache"

    - name: Upload binaries to release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: |
        mv ${{ matrix.collector-artifact }} ${{ matrix.collector-name }}
        mv ${{ matrix.api-artifact }} ${{ matrix.api-name }}
        gh release upload "${{ needs.draft-release.outputs.tag }}" ${{ matrix.collector-name }} ${{ matrix.api-name }}

  publish:
    name: Publish release with binaries
    runs-on: ubuntu-latest
    needs: [draft-release, build]

    steps:
    - name: Publish release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release edit --draft=false "${{ needs.draft-release.outputs.tag }}"
